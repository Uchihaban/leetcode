/*编写一个程序，找到两个单链表相交的起始节点。

例如，下面的两个链表：

A:          a1 → a2
                   ↘
                     c1 → c2 → c3
                   ↗            
B:     b1 → b2 → b3
在节点 c1 开始相交。



*/


public class GetIntersectionNode {
    public static ListNode getIntersectionNode(ListNode headA, ListNode headB) {
    	
    	if(headA==null && headB==null) {
    		return null;
    	}//如果链表为空，返回null
    	
    	ListNode l1 = headA;
    	ListNode l2 = headB;
    	int i=1,j=1;
    	
    	while(l1.next!=null) {
    		l1 = l1.next;
    		i++;
    	}//计算链表1的长度
    	while(l2.next!=null) {
    		l2 = l2.next;
    		j++;
    	}//计算链表2的长度
    	
    	if(l1!=l2) {
    		return null;
    	}//链表1和链表2的尾结点，则肯定不相交
    	
    	ListNode h1 = headA;
    	ListNode h2 = headB;
    	
    	if(i>=j) {
    		for(int n=0;n<i-j;n++) {
    			h1=h1.next;
    		}//链表1比链表2长，则转向链表1的第i-j个结点；
    	}
    	else {
    		for(int n=0;n<j-i;n++) {
    			h2=h2.next;
    		}//链表2比链表1长，则转向链表2的第j-i个结点；
    	}
    		
    		while(h1!=h2) {
    			h1=h1.next;
    			h2=h2.next;
    		}//判断是否相交；
    		return h1;
    	}
    
    public static void main(String[] args) {
    	
    	ListNode head1 =new ListNode(0);
    	ListNode node1 =new ListNode(4);
    	ListNode node2 =new ListNode(3);
    	ListNode node3 =new ListNode(5);

    	
    	ListNode head2 =new ListNode(0);
    	ListNode node4 =new ListNode(3);
    	
    	
    	head1.setNext(node1);
    	node1.setNext(node2);
    	node2.setNext(node3);
    	
    	head2.setNext(node4);
    	node4.setNext(node2);
    	node2.setNext(node3);
    	
    	ListNode l1 = head1;
    	while(l1!=null) {
    		System.out.print(l1.getData()+"->");
    		l1=l1.getNext();
    	}
    	System.out.print("\n-----------------------\n");
    	
    	ListNode l2 = head2;
    	while(l2!=null) {
    		System.out.print(l2.getData()+"->");
    		l2=l2.getNext();
    	}
    	System.out.print("\n-----------------------\n");
    	
    	ListNode head = getIntersectionNode(head1,head2);
    	
    	System.out.print(head.getData());
    	
    	}   	
}
